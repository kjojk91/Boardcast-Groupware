<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.broadcastgroupware.mapper.ChatroomMapper">

	<!-- ===================================채팅방================================ -->
	<!--  목록 매핑 -->
	<resultMap id="ChatroomListMap" type="com.example.broadcastgroupware.dto.ChatroomListDto">
		<id		column="chatroom_id"		property="chatroomId"/>
		<result column="chatroom_name"		property="chatroomName"/>
		<result column="last_message"		property="lastMessage"/>
		<result column="last_message_at"	property="lastMessageAt"/>
		<result column="unread_count"		property="unreadCount"/>
		<result column="room_type"			property="roomType"/>
		<result column="dm_key"				property="dmKey"/>
		<result column="last_incoming_at"   property="lastIncomingAt"/> 
		
	<!-- 서비스에서 아바타이미지 계산용 원재료 -->
		<result column="peer_user_id"		property="peerUserId"/>
		<result column="peer_avatar_path"	property="peerAvatarPath"/>
		<result column="group_avatar_path"	property="groupAvatarPath"/>
		<result column="peer_user_rank"    property="peerUserRank"/>
		 <result column="avatar_url"        property="avatarUrl"/>
	</resultMap>
	
	<!-- 내가 속한 DM 목록(상대 정보 포함) -->
<select id="selectRoomListByUser" parameterType="map" resultMap="ChatroomListMap">
	  SELECT
	      c.chatroom_id,
	      c.room_type,
	      c.dm_key,
	
	      lm.created_at AS last_message_at,
	      lm.content    AS last_message,
	
	      COALESCE(unread.cnt, 0) AS unread_count,
	
	      /* 이름: DM은 상대 이름, GROUP은 방 이름 */
	      CASE WHEN c.room_type = 'DM'
	           THEN u_peer.full_name
	           ELSE c.chatroom_name
	      END AS chatroom_name,
	
	      /* 직급: DM만 의미 있음 */
	      CASE WHEN c.room_type = 'DM' THEN u_peer.user_rank ELSE NULL END AS peer_user_rank,
	
	      CASE 
	      WHEN c.room_type = 'DM' THEN
	        COALESCE(
	          CONCAT(
	            '/uploads/',
	            ui.user_images_name,
	            CASE WHEN ui.user_images_ext IS NULL OR ui.user_images_ext = ''
	                 THEN '' ELSE CONCAT('.', TRIM(LEADING '.' FROM ui.user_images_ext)) END,
	            CASE WHEN ui.update_date IS NULL
	                 THEN '' ELSE CONCAT('?v=', UNIX_TIMESTAMP(ui.update_date)) END
	          ),
	          '/resources/images/users/avatar-default.png'
	        )
	      ELSE
	        '/resources/images/users/group-default.png'
	    END AS avatar_url
	  FROM chatroom c
	
	  /* 내가 속한 방 */
	  JOIN chatroom_user cu_self
	    ON cu_self.chatroom_id = c.chatroom_id
	   AND cu_self.user_id     = #{userId}
	   AND cu_self.chatroom_user_status = 'Y'
	
	  /* DM일 때만 상대 user_id 계산 (GROUP에는 매칭되지 않음) */
	  LEFT JOIN (
	    SELECT
	      c2.chatroom_id,
	      CASE
	        WHEN CAST(SUBSTRING_INDEX(c2.dm_key, ':', 1) AS UNSIGNED) = #{userId}
	          THEN CAST(SUBSTRING_INDEX(c2.dm_key, ':', -1) AS UNSIGNED)
	        ELSE CAST(SUBSTRING_INDEX(c2.dm_key, ':', 1) AS UNSIGNED)
	      END AS peer_user_id
	    FROM chatroom c2
	    WHERE c2.room_type = 'DM'
	  ) pid ON pid.chatroom_id = c.chatroom_id
	
	  /* DM일 때만 상대 프로필이 매칭됨 (GROUP이면 전부 NULL) */
	  LEFT JOIN `user` u_peer
	    ON u_peer.user_id = pid.peer_user_id
	
	  LEFT JOIN (
	    SELECT user_id, user_images_name, user_images_ext, update_date,
	           ROW_NUMBER() OVER (
	             PARTITION BY user_id
	             ORDER BY update_date DESC, create_date DESC, user_images_id DESC
	           ) AS rn
	    FROM user_images
	    WHERE user_images_type = '프로필'
	  ) ui ON ui.user_id = u_peer.user_id AND ui.rn = 1
	
	  /* 각 방의 최신 메시지 1건 */
	  LEFT JOIN (
	    SELECT m1.chatroom_id,
	           m1.chat_message_content AS content,
	           m1.create_date          AS created_at
	    FROM chat_message m1
	    JOIN (
	      SELECT m.chatroom_id, MAX(m.chat_message_id) AS max_id
	      FROM chat_message m
	      JOIN chatroom_user me
	        ON me.chatroom_id = m.chatroom_id
	       AND me.user_id     = #{userId}
	       AND me.chatroom_user_status = 'Y'
	      WHERE m.chat_message_status = 'Y'
	        AND m.create_date >= me.create_date   <!-- 내가 합류한 이후만 -->
	      GROUP BY m.chatroom_id
	    ) x ON x.chatroom_id = m1.chatroom_id
	       AND x.max_id      = m1.chat_message_id
	  ) lm ON lm.chatroom_id = c.chatroom_id
	
	  /* 안읽음 수 */
	  LEFT JOIN (
	    SELECT me.chatroom_id, COUNT(*) AS cnt
	    FROM chat_message m
	    JOIN chatroom_user me
	      ON me.chatroom_id = m.chatroom_id
	     AND me.user_id     = #{userId}
	     AND me.chatroom_user_status = 'Y'
	    JOIN chatroom_user sender
	      ON sender.chatroom_user_id = m.chatroom_user_id
	    WHERE m.chat_message_status = 'Y'
	      AND m.create_date >= me.create_date
	      AND sender.user_id &lt;&gt; #{userId}
	      AND (me.last_read_at IS NULL OR m.create_date > me.last_read_at)
	    GROUP BY me.chatroom_id
	  ) unread ON unread.chatroom_id = c.chatroom_id
	
	  /* ‘내가 받은’ 마지막 시간 */
	  LEFT JOIN (
	    SELECT m.chatroom_id,
	           MAX(m.create_date) AS last_incoming_at
	    FROM chat_message m
	    JOIN chatroom_user msg_cu
	      ON msg_cu.chatroom_user_id = m.chatroom_user_id
	    JOIN chatroom_user me
	      ON me.chatroom_id = m.chatroom_id
	     AND me.user_id     = #{userId}
	     AND me.chatroom_user_status = 'Y'
	    WHERE m.chat_message_status = 'Y'
	      AND msg_cu.user_id &lt;&gt; #{userId}
	      AND m.create_date >= me.create_date
	    GROUP BY m.chatroom_id
	  ) li ON li.chatroom_id = c.chatroom_id
	
	  WHERE
	    <!-- roomType이 오면 해당 타입만, 없으면 DM/GROUP 모두 -->
	    <choose>
	      <when test="roomType != null and roomType != ''">
	        c.room_type = #{roomType}
	      </when>
	      <otherwise>
	        c.room_type IN ('DM','GROUP')
	      </otherwise>
	    </choose>
	
	  ORDER BY
	    CASE WHEN li.last_incoming_at IS NULL THEN 1 ELSE 0 END ASC,
	    li.last_incoming_at DESC,
	    CASE WHEN li.last_incoming_at IS NULL THEN cu_self.create_date END DESC,
	    c.chatroom_id ASC
	</select>
	
	  <!-- dm_key로 방 1개 조회 -->
  <select id="selectByDmKey" parameterType="string" resultType="com.example.broadcastgroupware.domain.Chatroom">
    SELECT
      chatroom_id,
      room_type,
      dm_key,
      chatroom_name,
      chatroom_status,
      last_message_at,
      create_date
    FROM chatroom
    WHERE dm_key = #{dmKey}
    LIMIT 1
  </select>
	
	<!-- DM 방 생성 -->
	<insert id="upsertDmChatroom"
        	parameterType="com.example.broadcastgroupware.domain.Chatroom"
        	useGeneratedKeys="true" keyProperty="chatroomId">
	  INSERT INTO chatroom
	    (room_type, dm_key, chatroom_name, chatroom_status, last_message_at, create_date)
	  VALUES
	    (#{roomType}, #{dmKey}, #{chatroomName}, #{chatroomStatus}, #{lastMessageAt}, NOW())
	  ON DUPLICATE KEY UPDATE
	    chatroom_id = LAST_INSERT_ID(chatroom_id),  <!-- 기존 row의 PK를 getGeneratedKeys로 돌려받게 함 -->
	    chatroom_status = VALUES(chatroom_status)   <!-- 옵션: 상태 갱신 -->
	</insert>
	
	<!-- GROUP방 생성(dmkey 없이 항상 새로) -->
	<!-- 같은 사람이라도 그룹은 중복될 수 있으므로 upsert 말고 insert로 해도 된다. -->
	<insert id="insertGroupChatroom"
			parameterType="com.example.broadcastgroupware.domain.Chatroom"
			useGeneratedKeys="true" keyProperty="chatroomId">
		INSERT INTO chatroom
		 (room_type, chatroom_name, chatroom_status, last_message_at, create_date)
		VALUES
		 ('GROUP', #{chatroomName}, #{chatroomStatus}, #{lastMessageAt}, NOW())
	</insert>	
		
	<!-- (옵션) 드라이버/환경에 따라 필요할 수 있음 -->
	<select id="selectLastInsertId" resultType="int">
	  SELECT LAST_INSERT_ID()
	</select>
	
	<!-- 이미 있으면 무시 -->
	<insert id="insertChatroomUserIgnore">
	  INSERT IGNORE INTO chatroom_user (chatroom_id, user_id, create_date)
	  VALUES (#{chatroomId}, #{userId}, NOW())
	</insert>
	
	<!-- 메시지 저장 후 호출 (선택) -->
	<update id="updateChatroomLastActivity" parameterType="int">
	  UPDATE chatroom
	  SET last_message_at = NOW()
	  WHERE chatroom_id = #{chatroomId}
	</update>
	
	<!-- 마지막 메시지 내용 + 시간 동시 갱신 (last_message 컬럼이 있을 때 권장) -->
	<update id="updateChatroomLastMessage" parameterType="map">
	  UPDATE chatroom
	  SET last_message = #{lastMessage},
	      last_message_at = NOW()
	  WHERE chatroom_id = #{chatroomId}
	</update>
	
</mapper>





















