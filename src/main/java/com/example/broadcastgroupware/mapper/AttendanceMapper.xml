<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.broadcastgroupware.mapper.AttendanceMapper">
	<!--오늘날짜로 로그인한 직원의 근태기록 조회-->
	<select id="selectUserAttendance" resultType="com.example.broadcastgroupware.domain.Attendance">
		SELECT attendance_in attendanceIn, attendance_out attendanceOut, 
			attendance_outside attendanceOutside, attendance_inside attendanceInside
		FROM attendance WHERE attendance_date = DATE(NOW()) AND user_id = #{userId}
	</select>

	<!--로그인한 직원의 근태기록 조회-->
	<select id="selectAttendanceList" resultType="map">
		SELECT attendance_date attendanceDate, attendance_in attendanceIn, attendance_out attendanceOut, 
			attendance_outside attendanceOutside, attendance_inside attendanceInside
		FROM attendance WHERE user_id=#{userId}
	</select>
	
	<!--이번주 근무시간-->
	<select id="selectWeekWorkHours" resultType="string">
		SELECT sec_to_time(sum(timestampdiff(second,attendance_in,attendance_out)) OVER()) monthWorkHours 
		FROM attendance         
		WHERE year(attendance_date) = year(NOW()) and week(attendance_date) = week(NOW()) AND user_id = #{userId}
		ORDER BY attendance_date DESC LIMIT 0,1
	</select>
	
	<!--입사후 총 근무일-->
	<select id="selectTotalWorkDay" resultType="string">
		SELECT CONCAT(timestampdiff(year,user_join_date,NOW()),'년 ',
			timestampdiff(day,user_join_date,NOW())%365,'일') FROM user WHERE user_id=#{userId}
	</select>
	
	<!--직책별 팀,부서,전체 근태-->
	<select id="selectAttendanceListByRank" resultType="map" parameterType="com.example.broadcastgroupware.dto.AttendanceListDto">
		SELECT d.department_name departmentName, t.team_name teamName, u.full_name fullName, u.user_rank userRank,
			(SELECT sec_to_time(sum(timestampdiff(second,attendance_in,attendance_out)) OVER()) monthWorkHours FROM attendance         
		WHERE year(attendance_date) = year(NOW()) and month(attendance_date) = month(NOW()) AND user_id = u.user_id
		ORDER BY attendance_date DESC LIMIT 0,1) monthWorkHour
		FROM user u 
		INNER JOIN deployment_history dh ON u.user_id = dh.user_id
		INNER JOIN team t ON t.team_id = dh.team_id
		INNER JOIN department d ON d.department_id = t.department_id
		<choose>
			<when test="role == 'admin' or userRank == '국장'">
				
			</when>
			<when test="role != 'admin' and userRank == '팀장'">
				WHERE dh.team_id=
					(SELECT team_id FROM deployment_history WHERE user_id=#{userId} ORDER BY create_date desc LIMIT 0,1)
			</when>
			<when test="role != 'admin' and userRank == '부서장'">
				WHERE d.department_id=(SELECT d.department_id FROM department d 
					INNER JOIN team t ON d.department_id = t.department_id 
					INNER JOIN deployment_history dh ON dh.team_id = t.team_id
				WHERE dh.user_id=#{userId} ORDER BY dh.create_date desc LIMIT 0,1)
			</when>
		</choose>
	</select>
	
	<!--출근기록-->
	<insert id="insertAttendanceIn" parameterType="com.example.broadcastgroupware.domain.Attendance">
		INSERT INTO attendance(user_id, attendance_in) VALUES(#{userId},now());
	</insert>
	
	<!--퇴근기록-->
	<update id="updateAttendanceOut" parameterType="com.example.broadcastgroupware.domain.Attendance">
		UPDATE attendance SET attendance_out=now() WHERE attendance_date = DATE(NOW()) AND user_id = #{userId}
	</update>
	
	<!--외근기록-->
	<update id="updateAttendanceOutside" parameterType="com.example.broadcastgroupware.domain.Attendance">
		UPDATE attendance SET attendance_outside=now() WHERE attendance_date = DATE(NOW()) AND user_id = #{userId}
	</update>
	
	<!--외근복귀기록-->
	<update id="updateAttendanceInside" parameterType="com.example.broadcastgroupware.domain.Attendance">
		UPDATE attendance SET attendance_inside=now() WHERE attendance_date = DATE(NOW()) AND user_id = #{userId}
	</update>
</mapper>